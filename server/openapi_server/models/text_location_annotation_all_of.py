# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TextLocationAnnotationAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_type=None):  # noqa: E501
        """TextLocationAnnotationAllOf - a model defined in OpenAPI

        :param location_type: The location_type of this TextLocationAnnotationAllOf.  # noqa: E501
        :type location_type: str
        """
        self.openapi_types = {
            'location_type': str
        }

        self.attribute_map = {
            'location_type': 'locationType'
        }

        self._location_type = location_type

    @classmethod
    def from_dict(cls, dikt) -> 'TextLocationAnnotationAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TextLocationAnnotation_allOf of this TextLocationAnnotationAllOf.  # noqa: E501
        :rtype: TextLocationAnnotationAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_type(self):
        """Gets the location_type of this TextLocationAnnotationAllOf.

        Type of location  # noqa: E501

        :return: The location_type of this TextLocationAnnotationAllOf.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this TextLocationAnnotationAllOf.

        Type of location  # noqa: E501

        :param location_type: The location_type of this TextLocationAnnotationAllOf.
        :type location_type: str
        """
        allowed_values = ["city", "country", "department", "hospital", "organization", "other", "room", "state", "street", "zip"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type
