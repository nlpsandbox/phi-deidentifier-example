# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ProgrammingLanguage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    APL = "APL"
    ASP = "ASP"
    ADA = "Ada"
    ASSEMBLY = "Assembly"
    AWK = "Awk"
    BASIC = "Basic"
    C = "C"
    C_ = "C#"
    C_ = "C++"
    CLOJURE = "Clojure"
    CYTHON = "Cython"
    DART = "Dart"
    DELPHI_KYLIX = "Delphi/Kylix"
    EMACS_LISP = "Emacs-Lisp"
    ERLANG = "Erlang"
    EULER = "Euler"
    FORTH = "Forth"
    FORTRAN = "Fortran"
    GO = "Go"
    GROOVY = "Groovy"
    HASKELL = "Haskell"
    JAVA = "Java"
    JAVASCRIPT = "JavaScript"
    JULIA = "Julia"
    KOTLIN = "Kotlin"
    LISP = "Lisp"
    LOGO = "Logo"
    MATLAB = "MATLAB"
    ML = "ML"
    OCAML = "OCaml"
    OBJECT_PASCAL = "Object Pascal"
    OBJECTIVE_C = "Objective C"
    OTHER = "Other"
    OTHER_SCRIPTING_ENGINES = "Other Scripting Engines"
    PHP = "PHP"
    PL_SQL = "PL/SQL"
    PASCAL = "Pascal"
    PERL = "Perl"
    PIKE = "Pike"
    PROLOG = "Prolog"
    PYTHON = "Python"
    R = "R"
    REBOL = "REBOL"
    REXX = "Rexx"
    RUBY = "Ruby"
    RUST = "Rust"
    SCALA = "Scala"
    SCHEME = "Scheme"
    SQL = "SQL"
    TCL = "Tcl"
    TYPESCRIPT = "TypeScript"
    UNIX_SHELL = "Unix Shell"
    VISUAL_BASIC = "Visual Basic"
    YACC = "YACC"
    ZOPE = "Zope"
    def __init__(self):  # noqa: E501
        """ProgrammingLanguage - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'ProgrammingLanguage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProgrammingLanguage of this ProgrammingLanguage.  # noqa: E501
        :rtype: ProgrammingLanguage
        """
        return util.deserialize_model(dikt, cls)
